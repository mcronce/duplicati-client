#!/usr/bin/env python3
import json
import os.path
import sys
import datetime
import time
import yaml

from os.path import expanduser
from os.path import splitext

import duplicati_client.arg_parser as ArgumentParser
from duplicati_client import config
from duplicati_client import compatibility
from duplicati_client import common
from duplicati_client import functions
from duplicati_client import auth
from duplicati_client import helper

def main(**args):
    # Command method
    method = sys.argv[1]

    if method == "version":
        message = "Duplicati client version "
        message += config.APPLICATION_VERSION
        return common.log_output(message, True)

    # Default values
    data = {
        "last_login": None,
        "parameters_file": None,
        "server": {
            "port": "8200",
            "protocol": "http",
            "url": "localhost",
            "verify": True
        },
        'token': None,
        'token_expires': None,
        'verbose': False,
        'authorization': ''
    }

    # Detect home dir for config file
    config.CONFIG_FILE = compatibility.get_config_location()

    # Load configuration
    overwrite = args.get("overwrite", False)
    data = load_config(data, overwrite)

    param_file = args.get("param-file", None)
    # Set parameters file
    if method == "params":
        data = set_parameters_file(data, args, param_file)

    # Load parameters file
    args = common.load_parameters(data, args)

    # Show parameters
    if method == "params" and (args.get("show", False) or param_file is None):
        display_parameters(data)

    # Toggle verbosity
    if method == "verbose":
        mode = args.get("mode", None)
        data = toggle_verbose(data, mode)

    # Write verbosity setting to config variable
    config.VERBOSE = data.get("verbose", False)

    # Display the config if requested
    if method == "config":
        display_config(data)

    # Display the status if requested
    if method == "status":
        display_status(data)

    # Login
    if method == "login":
        url = args.get("url", None)
        password = args.get("password", None)
        basic_user = args.get("basic_user", None)
        basic_pass = args.get("basic_pass", None)
        certfile = args.get("certfile", None)
        insecure = args.get("insecure", False)
        verify = auth.determine_ssl_validation(data, certfile, insecure)
        interactive = args.get("script", True)
        data = auth.login(data, url, password, verify, interactive,
                          basic_user, basic_pass)

    # Logout
    if method == "logout":
        data = auth.logout(data)

    # List resources
    if method == "list":
        resource_type = args.get("type", None)
        functions.list_resources(data, resource_type)

    # Get resources
    if method == "get":
        resource_type = args.get("type", None)
        resource_ids = args.get("id", None)
        functions.get_resources(data, resource_type, resource_ids)

    # Describe resources
    if method == "describe":
        resource_type = args.get("type", None)
        resource_ids = args.get("id", None)
        functions.describe_resources(data, resource_type, resource_ids)

    # Set resource values
    if method == "set":
        resource = sys.argv[2]
        if resource == "password":
            password = args.get("password", None)
            disable_login = args.get("disable", False)
            interactive = args.get("script", True)
            auth.set_password(data, password, disable_login, interactive)

    # Repair a database
    if method == "repair":
        backup_id = args.get("id", None)
        functions.repair_database(data, backup_id)

    # Verify remote data files
    if method == "verify":
        backup_id = args.get("id", None)
        functions.verify_remote_files(data, backup_id)

    # Compact remote data
    if method == "compact":
        backup_id = args.get("id", None)
        functions.compact_remote_files(data, backup_id)

    # Dismiss notifications
    if method == "dismiss":
        resource_id = args.get("id", "all")
        if not resource_id.isdigit() and resource_id != "all":
            common.log_output("Invalid id: " + resource_id, True)
            return
        functions.dismiss_notifications(data, resource_id)

    # Show logs
    if method == "logs":
        log_type = args.get("type", None)
        backup_id = args.get("id", None)
        remote = args.get("remote", False)
        follow = args.get("follow", False)
        lines = args.get("lines", 10)
        show_all = args.get("all", False)
        functions.get_logs(data, log_type, backup_id, remote, follow, lines, show_all)

    # Run backup
    if method == "run":
        backup_id = args.get("id", None)
        functions.run_backup(data, backup_id)

    # Abort backup
    if method == "abort":
        backup_id = args.get("id", None)
        functions.abort_task(data, backup_id)

    # Create method
    if method == "create":
        import_type = args.get("type", None)
        import_file = args.get("import-file", None)
        import_meta = args.get("import_metadata", None)
        functions.import_resource(data, import_type, import_file, None, import_meta)

    # Update method
    if method == "update":
        import_type = args.get("type", None)
        import_id = args.get("id", None)
        import_file = args.get("import-file", None)
        # import-metadata is the inverse of strip-metadata
        import_meta = not args.get("strip_metadata", False)
        functions.import_resource(data, import_type, import_file, import_id, import_meta)

    # Delete a resource
    if method == "delete":
        resource_id = args.get("id", None)
        resource_type = args.get("type", None)
        delete_db = args.get("delete_db", False)
        confirm = args.get("confirm", False)
        recreate = args.get("recreate", False)
        functions.delete_resource(data, resource_type, resource_id,
                        confirm, delete_db, recreate)

    # Export method
    if method == "export":
        resource_type = args.get("type", None)
        resource_id = args.get("id", None)
        output_type = args.get("output", None)
        path = args.get("output_path", None)
        all_ids = args.get("all", False)
        timestamp = args.get("timestamp", False)
        functions.export_resource(data, resource_type, resource_id, output_type,
                        path, all_ids, timestamp)

# Load the configration from disk
def load_config(data, overwrite=False):
    # If the config file doesn't exist, create it
    if os.path.isfile(config.CONFIG_FILE) is False or overwrite is True:
        common.log_output("Creating config file", True)
        common.write_config(data)
    # Load the configuration from the config file
    with open(config.CONFIG_FILE, 'r') as file:
        try:
            data = yaml.safe_load(file)
            common.validate_config(data)
            return data
        except yaml.YAMLError as exc:
            common.log_output(exc, True)
            sys.exit(2)


# Set parameters file
def set_parameters_file(data, args, file=None):
    # Disable parameters file if requested
    if args.get("disable", False):
        data.pop("parameters_file", None)
        common.write_config(data)
        common.log_output("Disabling parameters-file", True)
        return data

    if file is None:
        return data

    data["parameters_file"] = file
    common.write_config(data)
    common.log_output("Setting parameters-file", True)
    return data

# Print parameters to stdout
def display_parameters(data):
    file = data.get("parameters_file", None)
    if file is None:
        return
    with open(file, 'r') as file_handle:
        try:
            parameters_file = yaml.safe_load(file_handle)
            output = yaml.dump(parameters_file, default_flow_style=False)
            common.log_output(output, True)
            return
        except Exception:
            message = "Could not load parameters file"
            common.log_output(message, True)
            return

# Toggle verbosity
def toggle_verbose(data, mode=None):
    if mode == "enable":
        data["verbose"] = True
    elif mode == "disable":
        data["verbose"] = False
    else:
        data["verbose"] = not data.get("verbose", False)

    common.write_config(data)
    verbose = data.get("verbose", True)
    message = "verbose mode: " + str(verbose)
    common.log_output(message, True)
    return data

# Print the config to stdout
def display_config(data):
    common.log_output(yaml.dump(data, default_flow_style=False), True)

# Print the status to stdout
def display_status(data):
    message = "Server       : " + common.create_baseurl(data)
    common.log_output(message, True)

    server_activity, backup_id = functions.fetch_progress_state(data)
    message = "Server status: "
    if server_activity.get("OverallProgress", 1) != 1:
        message += server_activity.get("Phase", None)
        message += " on backup " + backup_id
    else:
        message += "Idle"
    common.log_output(message, True)

    message = "Config file  : " + config.CONFIG_FILE
    common.log_output(message, True)

    if data.get("parameters_file", None) is not None:
        param_file = data.get("parameters_file", "")
        message = "Params file  : " + param_file
        common.log_output(message, True)

    token = data.get("token", None)
    token_expires = data.get("token_expires", None)
    if token is None or token_expires is None:
        common.log_output("Not logged in", True)
        sys.exit(2)

    if data.get("last_login", None) is not None:
        last_login = data.get("last_login", "")
        message = "Logged in    : " + helper.format_time(last_login)
        common.log_output(message, True)

    if token_expires is not None:
        message = "Expiration   : " + helper.format_time(token_expires)
        common.log_output(message, True)

# argparse argument logic
if __name__ == '__main__':
    if (len(sys.argv) == 1):
        common.log_output(common.info(), True)
        sys.exit(2)

    # Initialize argument parser and standard optional arguments
    parser = ArgumentParser.parser

    # Construct parsers and initialize the main method
    args = parser.parse_args()
    main(**vars(args))
